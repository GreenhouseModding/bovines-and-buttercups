plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '1.4-SNAPSHOT'
}
base {
    archivesName = "${mod_name}-fabric"
}

sourceSets {
    main {
        resources {
            srcDirs += project(":common").file("src/main/generated")
        }
    }
}

repositories {
    maven {
        url 'https://maven.willbl.dev/releases/'
    }
    maven {
        url 'https://maven.merchantpug.net/releases/'
    }
    maven {
        url 'https://maven.ladysnake.org/releases'
    }
    mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    include(modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}")) {
        exclude(group: "net.fabricmc")
    }
    include(modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}")) {
        exclude(group: "net.fabricmc")
    }

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    implementation project(":common")

    modApi(include("com.williambl.dfunc:data-functions-fabric:${dfunc_version}"))

    modCompileOnly("dev.greenhouseteam.rdpr:rdpr-fabric:${rdpr_version}:api")
    modRuntimeOnly(include("dev.greenhouseteam.rdpr:rdpr-fabric:${rdpr_version}"))

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        datagen {
            inherit server
            setConfigName("Fabric Datagen")
            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${project(":common").file("src/main/generated")}")
            vmArg("-Dfabric-api.datagen.modid=${mod_id}")

            runDir("build/datagen")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
